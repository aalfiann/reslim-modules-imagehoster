<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\imagehoster\ImgurService as ImgurService;          //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim

    // Post to upload
    $app->post('/imagehoster/imgur/upload', function (Request $request, Response $response) {
        $is = new ImgurService($this->db);
        $is->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $is->username = $datapost['Username'];
        $is->token = $datapost['Token'];

        $is->image = (empty($datapost['Image'])?'':$datapost['Image']);
        $is->title = (empty($datapost['Title'])?'':$datapost['Title']);
        $is->description = (empty($datapost['Description'])?'':$datapost['Description']);
        $is->type = (empty($datapost['Type'])?'':$datapost['Type']);
        $is->name = (empty($datapost['Name'])?'':$datapost['Name']);
        $is->album = (empty($datapost['Album'])?'':$datapost['Album']);
        $is->clientid = (empty($datapost['ClientID'])?'':$datapost['ClientID']);

        $body = $response->getBody();
        $body->write($is->uploadImage());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Image','1-250','url'))
        ->add(new ValidateParam('ClientID','1-500','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // Post to upload with auto rotate proxy
    $app->post('/imagehoster/imgur/upload/rotate', function (Request $request, Response $response) {
        $is = new ImgurService($this->db);
        $is->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();

        $is->username = $datapost['Username'];
        $is->token = $datapost['Token'];

        $is->image = (empty($datapost['Image'])?'':$datapost['Image']);
        $is->title = (empty($datapost['Title'])?'':$datapost['Title']);
        $is->description = (empty($datapost['Description'])?'':$datapost['Description']);
        $is->type = (empty($datapost['Type'])?'':$datapost['Type']);
        $is->name = (empty($datapost['Name'])?'':$datapost['Name']);
        $is->album = (empty($datapost['Album'])?'':$datapost['Album']);
        $is->clientid = (empty($datapost['ClientID'])?'':$datapost['ClientID']);

        $body = $response->getBody();
        $body->write($is->uploadImageRotate());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Image','1-250','url'))
        ->add(new ValidateParam('ClientID','1-500','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam('Username','1-50','required'));

    // GET api to show all data (index) with pagination
    $app->get('/imagehoster/imgur/data/index/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $is = new ImgurService($this->db);
        $is->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $is->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $is->firstdate = filter_var((empty($_GET['firstdate'])?'':$_GET['firstdate']),FILTER_SANITIZE_STRING);
        $is->lastdate = filter_var((empty($_GET['lastdate'])?'':$_GET['lastdate']),FILTER_SANITIZE_STRING);
        $is->username = $request->getAttribute('username');
        $is->token = $request->getAttribute('token');
        $is->page = $request->getAttribute('page');
        $is->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($is->index());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'));

    // GET api to read single data
    $app->get('/imagehoster/imgur/data/read/{id}/{username}/{token}', function (Request $request, Response $response) {
        $is = new ImgurService($this->db);
        $is->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $is->username = $request->getAttribute('username');
        $is->token = $request->getAttribute('token');
        $is->id = $request->getAttribute('id');
        $body = $response->getBody();
        $body->write($is->read());
        return classes\Cors::modify($response,$body,200);
    });